---
import { getRelativeLocaleUrl } from "astro:i18n";
import { languageList } from "@/i18n/ui";
import { useTranslations } from "@/i18n/utils";

const getPathWithoutLocale = (path: string): string => {
  const segments = path.split("/").filter(Boolean);
  return segments.slice(1).join("/") || "/";
};

const currentPathWithoutLocale = getPathWithoutLocale(Astro.url.pathname);
const currentLang = Astro.currentLocale || "es";
const translateLabels = useTranslations(currentLang as keyof typeof languageList);

const linkClasses =
  "flex items-center px-6 py-4 text-base font-medium transition-all duration-300 hover:bg-gray-100/50 dark:hover:bg-gray-800/50 group relative overflow-hidden rounded-xl";

const navLinks = [
  {
    href: getRelativeLocaleUrl(currentLang, "/"),
    label: translateLabels("nav.home"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "about"),
    label: translateLabels("nav.nosotros"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "values"),
    label: translateLabels("nav.values"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "action"),
    label: translateLabels("nav.action"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "donate"),
    label: translateLabels("nav.donate"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "team"),
    label: translateLabels("nav.team"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "projects"),
    label: translateLabels("nav.projects"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "gallery"),
    label: translateLabels("nav.gallery"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "partnerts"),
    label: translateLabels("nav.partnert"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "contact"),
    label: translateLabels("nav.contact"),
    hoverText: "hover:text-secondary",
  },

];

---

<header
  class="bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200/20 dark:border-gray-700/20 fixed w-full top-0 z-50 shadow-lg"
>
  <div class="container mx-auto flex justify-between items-center px-6 py-4">
    <!-- Logo -->
    <a
      href={getRelativeLocaleUrl(currentLang, "/")}
      class="flex items-center space-x-2 group"
    >
      <span
        class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-secondary group-hover:from-secondary group-hover:to-primary transition-all duration-500"
      >
        Mires
      </span>
    </a>

    <!-- Controles -->
    <div class="flex items-center space-x-4">
      <!-- Selector de Idioma -->
      <div class="relative group">
        <button
          class="px-4 py-2 rounded-xl bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 flex items-center space-x-2 shadow-sm hover:shadow-md"
          aria-label="Cambiar idioma"
        >
          <span class="text-sm">üåç</span>
          <span class="text-sm font-medium uppercase">{currentLang}</span>
        </button>
        <div
          class="absolute right-0 top-full mt-2 w-40 bg-white dark:bg-gray-800 rounded-xl shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 border border-gray-100 dark:border-gray-700"
        >
          <ul class="py-2">
            {
              Object.entries(languageList).map(
                ([langCode, langName]) =>
                  currentLang !== langCode && (
                    <li>
                      <a
                        href={getRelativeLocaleUrl(langCode as any, currentPathWithoutLocale)}
                        class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-200"
                      >
                        {langName}
                      </a>
                    </li>
                  )
              )
            }
          </ul>
        </div>
      </div>

      <!-- Bot√≥n de Tema -->
      <button
        id="theme-toggle"
        class="p-3 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 shadow-sm hover:shadow-md"
        aria-label="Cambiar tema"
      >
        <span id="theme-icon" class="text-xl">‚òÄÔ∏è</span>
      </button>

      <!-- Bot√≥n de Men√∫ -->
      <button
        id="mobile-menu-button"
        class="p-3 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300"
        aria-label="Abrir men√∫"
      >
        <svg
          class="w-6 h-6 text-gray-700 dark:text-gray-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Men√∫ Lateral -->
  <div
    id="mobile-menu"
    class="hidden fixed top-[73px] right-0 w-80 h-[calc(100vh-73px)] bg-white/95 dark:bg-gray-900/95 backdrop-blur-md shadow-2xl transform transition-all duration-300 ease-in-out border-l border-gray-200/20 dark:border-gray-700/20"
  >
    <nav class="h-full overflow-y-auto">
      <div class="p-6">
        <ul class="space-y-4">
          {
            navLinks.map((link) => (
              <li>
                <a
                  href={link.href}
                  class={`${linkClasses} ${link.hoverText}`}
                >
                  <span class="text-gray-700 dark:text-gray-200 group-hover:text-secondary transition-colors duration-300">
                    {link.label}
                  </span>
                  <span class="absolute inset-y-0 left-0 w-1 bg-secondary transform scale-y-0 group-hover:scale-y-100 transition-transform duration-300" />
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </nav>
  </div>
</header>

<style>
  /* Scrollbar personalizado */
  nav::-webkit-scrollbar {
    width: 5px;
  }

  nav::-webkit-scrollbar-track {
    background: transparent;
  }

  nav::-webkit-scrollbar-thumb {
    background: #e2e8f0;
    border-radius: 3px;
  }

  .dark nav::-webkit-scrollbar-thumb {
    background: #334155;
  }

  /* Animaciones del men√∫ */
  #mobile-menu {
    transform: translateX(100%);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  #mobile-menu.translate-x-0 {
    transform: translateX(0);
  }
  
  #mobile-menu.translate-x-full {
    transform: translateX(100%);
  }
</style>

<script is:inline>
  const themeToggle = document.getElementById("theme-toggle");
  const themeIcon = document.getElementById("theme-icon");
  const htmlElement = document.documentElement;
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");

  // Cambio de Tema
  const toggleTheme = () => {
    htmlElement.classList.toggle("dark");
    const isDarkMode = htmlElement.classList.contains("dark");
    themeIcon.textContent = isDarkMode ? "üåô" : "‚òÄÔ∏è";
    localStorage.setItem("theme", isDarkMode ? "dark" : "light");
  };

  const savedTheme = localStorage.getItem("theme");
  if (savedTheme === "light") {
    htmlElement.classList.remove("dark");
    themeIcon.textContent = "‚òÄÔ∏è";
  } else {
    htmlElement.classList.add("dark");
    themeIcon.textContent = "üåô";
  }

  themeToggle.addEventListener("click", toggleTheme);

  // Men√∫ Hamburguesa
  let isMenuOpen = false;
  const toggleMenu = () => {
    isMenuOpen = !isMenuOpen;
    if (isMenuOpen) {
      mobileMenu.classList.remove("hidden");
      mobileMenu.classList.add("translate-x-0");
      mobileMenu.classList.remove("translate-x-full");
      document.body.style.overflow = "hidden";
    } else {
      mobileMenu.classList.add("translate-x-full");
      mobileMenu.classList.remove("translate-x-0");
      document.body.style.overflow = "";
      setTimeout(() => {
        if (!isMenuOpen) {
          mobileMenu.classList.add("hidden");
        }
      }, 300);
    }
  };

  mobileMenuButton.addEventListener("click", (e) => {
    e.stopPropagation();
    toggleMenu();
  });

  // Cerrar men√∫ al hacer clic fuera
  document.addEventListener("click", (e) => {
    if (
      isMenuOpen &&
      !mobileMenu.contains(e.target) &&
      !mobileMenuButton.contains(e.target)
    ) {
      toggleMenu();
    }
  });

  // Cerrar men√∫ al hacer clic en un enlace
  mobileMenu.querySelectorAll("a").forEach((link) => {
    link.addEventListener("click", () => {
      toggleMenu();
    });
  });

  // Cerrar men√∫ al redimensionar la ventana
  window.addEventListener("resize", () => {
    if (window.innerWidth >= 768 && isMenuOpen) {
      toggleMenu();
    }
  });
</script>