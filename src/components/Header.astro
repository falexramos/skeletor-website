---
import { getRelativeLocaleUrl } from "astro:i18n";
import { languageList } from "@/i18n/ui";
import { useTranslations } from "@/i18n/utils";
import SocialLinks from "./SocialLinks.astro";
import LogoIcon from "./LogoIcon.astro";


const getPathWithoutLocale = (path: string): string => {
  const segments = path.split("/").filter(Boolean);
  // Si el primer segmento es un idioma, lo eliminamos
  if (segments[0] === 'en' || segments[0] === 'es') {
    segments.shift();
  }
  return '/' + segments.join("/");
};

const currentPathWithoutLocale = getPathWithoutLocale(Astro.url.pathname);
const currentLang = Astro.currentLocale || "es";
const translateLabels = useTranslations(currentLang as keyof typeof languageList);

const linkClasses =
  "block w-full py-4 px-6 text-xl font-medium transition-all duration-300 relative";
// Log the value
const navLinks = [
  {
    href: getRelativeLocaleUrl(currentLang, "/"),
    label: translateLabels("nav.home"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "about"),
    label: translateLabels("nav.nosotros"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "action"),
    label: translateLabels("nav.action"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "values"),
    label: translateLabels("nav.values"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "team"),
    label: translateLabels("nav.team"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "projects"),
    label: translateLabels("nav.projects"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "gallery"),
    label: translateLabels("nav.gallery"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "partnerts"),
    label: translateLabels("nav.partnert"),
    hoverText: "hover:text-secondary",
  },
  {
    href: getRelativeLocaleUrl(currentLang, "donate"),
    label: translateLabels("nav.donate"),
    hoverText: "hover:text-secondary",
  },  
  {
    href: getRelativeLocaleUrl(currentLang, "contact"),
    label: translateLabels("nav.contact"),
    hoverText: "hover:text-secondary",
  },
];

const textFollow = translateLabels("nav.text.follow");
// Enlaces sociales
const socialLinks = [
  {
    platform: "Facebook",
    url: "https://www.facebook.com/share/1E1k8QJLYa/",
    icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path></svg>`
  },
  {
    platform: "Instagram",
    url: "https://www.instagram.com/somosmires?igsh=MXZtdzl0ZnJhNG1pZQ==",
    icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.205.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/></svg>`
  },
  {
    platform: "LinkedIn",
    url: "https://www.linkedin.com/company/somosmires/",
    icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.225 0z"/></svg>`
  }
];
---

<header class="fixed top-0 left-0 w-full z-50">
  <!-- Top Bar -->
  <div class="w-full bg-white/90 dark:bg-darkbg/90 backdrop-blur-md shadow-md py-4 px-6 flex justify-between items-center border-b border-slate-200 dark:border-white/10 transition-colors duration-300">
    <!-- Left Side: Social Links (hidden on mobile) -->
    <div class="hidden md:flex items-center space-x-2">
      {socialLinks.map(link => (
        <a 
          href={link.url} 
          target="_blank" 
          rel="noopener noreferrer" 
          class="p-2 rounded-full bg-primary/10 hover:bg-primary/20 dark:bg-white/10 dark:hover:bg-white/20 text-primary dark:text-white transition-all duration-300"
          aria-label={link.platform}
        >
          <Fragment set:html={link.icon} />
        </a>
      ))}
    </div>
    
    <!-- Mobile: Just show logo on left -->
    <div class="md:hidden flex items-center">
      <a href={getRelativeLocaleUrl(currentLang, "/")} class="flex items-center group">
        <div class="flex items-center gap-2">
          <LogoIcon className="w-8 h-8 text-primary dark:text-white transition-colors duration-500" />
          <span class="text-xl font-extrabold text-primary dark:text-white transition-colors duration-500">
            MIRES
          </span>
        </div>
      </a>
    </div>

    <!-- Center: Logo and Name -->
    <div class="hidden md:flex items-center justify-center flex-grow">
      <a href={getRelativeLocaleUrl(currentLang, "/")} class="flex items-center group">
        <div class="flex items-center gap-3">
          <LogoIcon className="w-10 h-10 text-primary dark:text-white transition-colors duration-500" />
          <span class="text-3xl font-extrabold text-primary dark:text-white transition-colors duration-500">
            MIRES
          </span>
        </div>
      </a>
    </div>

    <!-- Right Side: Donate Button, Language Selector, Theme Toggle, Menu Button -->
    <div class="flex items-center gap-3">
      <!-- Donate Button (hidden on small screens) -->
      <a 
        href={getRelativeLocaleUrl(currentLang, "donate")} 
        class="hidden sm:flex items-center px-4 py-2 bg-secondary hover:bg-secondary/90 text-white rounded-full text-sm font-medium transition-all duration-300 shadow-sm hover:shadow-md"
      >
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
        <span>{translateLabels("nav.donate")}</span>
      </a>
      
      <!-- Language Selector -->
      <div class="relative group ">
        <button class="px-2 py-1 rounded-lg bg-primary/10 hover:bg-primary/20 dark:bg-white/10 dark:hover:bg-white/20 text-primary dark:text-white transition-all duration-300 flex items-center justify-center gap-1">
          <span class="text-xs font-bold uppercase">{currentLang}</span>
        </button>
        <div class="absolute top-full right-0 mt-2 w-24 bg-white dark:bg-darkbg backdrop-blur-md rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 border border-gray-200 dark:border-white/10 overflow-hidden transform origin-top scale-95 group-hover:scale-100 z-50">
          <ul class="py-1">
            {
              Object.entries({es: "Español", en: "English"}).map(
                ([langCode, langName]) =>
                  currentLang !== langCode && (
                    <li>
                      <a href={getRelativeLocaleUrl(langCode as any, currentPathWithoutLocale)} class="block px-3 py-1 text-xs hover:bg-gray-100 dark:hover:bg-white/10 transition-colors text-gray-800 dark:text-white font-medium text-center">
                        {langName}
                      </a>
                    </li>
                  )
              )
            }
          </ul>
        </div>
      </div>
      
      <!-- Theme Toggle -->
      <button id="top-theme-toggle" class=" px-2 py-1 rounded-lg bg-primary/10 hover:bg-primary/20 dark:bg-white/10 dark:hover:bg-white/20 text-primary dark:text-white transition-all duration-300 items-center justify-center">
        <span id="top-theme-icon" class="text-xs">☀️</span>
      </button>

      <!-- Menu Toggle Button -->
      <button id="menu-toggle" class="p-2 rounded-full bg-primary/10 hover:bg-primary/20 dark:bg-white/10 dark:hover:bg-white/20 text-primary dark:text-white transition-all duration-300 flex items-center justify-center">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Sidebar Menu (Hidden by default) - Siempre oscuro -->
  <div id="sidebar" class="fixed top-0 right-0 w-[85%] xs:w-[75%] sm:w-[60%] md:w-80 lg:w-96 h-screen bg-darkbg/95 backdrop-blur-lg shadow-2xl transform transition-transform duration-500 ease-in-out translate-x-full z-50 overflow-hidden">
    <div class="flex flex-col h-full">
      <!-- Sidebar Header -->
      <div class="flex justify-between items-center p-6 border-b border-white/10">
        <a href={getRelativeLocaleUrl(currentLang, "/")} class="flex items-center group">
          <div class="flex items-center gap-3">
            
            <LogoIcon className="w-8 h-8 sm:w-10 sm:h-10 text-white transition-colors duration-500" />

            <span class="text-2xl sm:text-3xl font-extrabold text-white transition-colors duration-500">
              MIRES
            </span>
          </div>
        </a>
        <button id="close-menu" class="p-2 rounded-full bg-white/10 hover:bg-white/20 text-white transition-all duration-300">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Navigation Links -->
      <nav class="flex-1 overflow-y-auto py-6 sm:py-8">
        <ul class="space-y-2 sm:space-y-3 px-4 sm:px-6">
          {
            navLinks.map((link) => {
              const isActive = Astro.url.pathname === link.href || 
                              (link.href !== getRelativeLocaleUrl(currentLang, "/") && 
                               Astro.url.pathname.startsWith(link.href));
              return (
                <li>
                  <a 
                    href={link.href} 
                    class={`${linkClasses} ${isActive 
                      ? 'bg-secondary/20 text-white border-l-4 border-secondary' 
                      : 'text-white/80 hover:bg-white/10 hover:border-l-4 hover:border-secondary/50'} 
                      rounded-r-xl group flex items-center transition-all duration-300`}
                  >
                    <div class="relative overflow-hidden w-full pl-2">
                      <span class="text-base sm:text-xl font-medium">{link.label}</span>
                    </div>
                  </a>
                </li>
              );
            })
          }
        </ul>

        <!-- Social Links Section -->
        <div class="mt-8 px-4 sm:px-6">
          <h3 class="text-white/70 text-sm uppercase font-semibold mb-4 pl-2">{textFollow}</h3>
          <div class="flex flex-wrap gap-3 pl-2">
            <SocialLinks links={socialLinks} />
          </div>
        </div>
      </nav>
      
      <!-- Sidebar Footer -->
      <div class="p-4 sm:p-6 border-t border-white/10">
        <div class="grid grid-cols-2 gap-4">
          <!-- Language Selector in Sidebar -->
          <div class="relative group">
            <button class="w-full px-3 py-2 sm:px-4 sm:py-3 rounded-xl bg-white/10 hover:bg-white/20 text-white transition-all duration-300 flex items-center justify-center gap-2">
              <span class="text-sm font-bold uppercase">{currentLang}</span>
            </button>
            <div class="absolute bottom-full left-0 mb-2 w-full bg-darkbg/95 backdrop-blur-md rounded-xl shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 border border-white/10 overflow-hidden transform origin-bottom scale-95 group-hover:scale-100">
              <ul class="py-1">
                {
                  Object.entries({es: "Español", en: "English"}).map(
                    ([langCode, langName]) =>
                      currentLang !== langCode && (
                        <li>
                          <a href={getRelativeLocaleUrl(langCode as any, currentPathWithoutLocale)} class="block px-4 py-2 text-sm hover:bg-white/10 transition-colors text-white font-medium text-center">
                            {langName}
                          </a>
                        </li>
                      )
                  )
                }
                
              </ul>
            </div>
          </div>
          
          <!-- Theme Toggle in Sidebar -->
          <button id="sidebar-theme-toggle" class="px-3 py-2 sm:px-4 sm:py-3 rounded-xl bg-white/10 hover:bg-white/20 text-white transition-all duration-300">
            <span id="sidebar-theme-icon" class="text-sm">☀️</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Overlay -->
  <div id="overlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 hidden"></div>
</header>

<!-- Spacer para evitar que el contenido quede debajo del header -->
<div class="h-[72px]"></div>

<style>
  /* Scrollbar personalizado */
  nav::-webkit-scrollbar {
    width: 3px;
  }

  nav::-webkit-scrollbar-track {
    background: transparent;
  }

  nav::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
  }
  
  /* Animation for menu items */
  #sidebar ul li {
    opacity: 0;
    transform: translateX(20px);
    transition: opacity 0.4s ease, transform 0.4s ease;
  }
  
  #sidebar.open ul li {
    opacity: 1;
    transform: translateX(0);
  }
  
  /* Staggered animation delay for menu items */
  #sidebar ul li:nth-child(1) { transition-delay: 0.1s; }
  #sidebar ul li:nth-child(2) { transition-delay: 0.15s; }
  #sidebar ul li:nth-child(3) { transition-delay: 0.2s; }
  #sidebar ul li:nth-child(4) { transition-delay: 0.25s; }
  #sidebar ul li:nth-child(5) { transition-delay: 0.3s; }
  #sidebar ul li:nth-child(6) { transition-delay: 0.35s; }
  #sidebar ul li:nth-child(7) { transition-delay: 0.4s; }
  #sidebar ul li:nth-child(8) { transition-delay: 0.45s; }
  #sidebar ul li:nth-child(9) { transition-delay: 0.5s; }
  #sidebar ul li:nth-child(10) { transition-delay: 0.55s; }
  
  /* Hover effects for links */
  #sidebar ul li a:hover {
    transform: translateX(5px);
  }
  
  /* Logo hover animation */
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  a.group:hover svg {
    animation: pulse 1.5s infinite;
  }

  /* Swipe handle for mobile */
  @media (max-width: 640px) {
    #sidebar::after {
      content: '';
      position: absolute;
      top: 50%;
      left: -12px;
      width: 6px;
      height: 40px;
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: 3px;
      transform: translateY(-50%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    #sidebar.open::after {
      opacity: 1;
    }
  }
</style>

<script is:inline>
  // DOM Elements
  const sidebarThemeToggle = document.getElementById("sidebar-theme-toggle");
  const sidebarThemeIcon = document.getElementById("sidebar-theme-icon");
  const htmlElement = document.documentElement;
  const menuToggle = document.getElementById("menu-toggle");
  const closeMenu = document.getElementById("close-menu");
  const sidebar = document.getElementById("sidebar");
  const overlay = document.getElementById("overlay");

  // Theme Toggle Function
  const toggleTheme = () => {
    htmlElement.classList.toggle("dark");
    const isDarkMode = htmlElement.classList.contains("dark");
    sidebarThemeIcon.textContent = isDarkMode ? "🌙" : "☀️";
    
    // Also update the top theme icon if it exists
    const topThemeIcon = document.getElementById("top-theme-icon");
    if (topThemeIcon) {
      topThemeIcon.textContent = isDarkMode ? "🌙" : "☀️";
    }
    
    localStorage.setItem("theme", isDarkMode ? "dark" : "light");
  };

  // Initialize Theme
  const savedTheme = localStorage.getItem("theme");
  if (savedTheme === "dark") {
    htmlElement.classList.remove("dark");
    sidebarThemeIcon.textContent = "☀️";
    
    // Also update the top theme icon if it exists
    const topThemeIcon = document.getElementById("top-theme-icon");
    if (topThemeIcon) {
      topThemeIcon.textContent = "☀️";
    }
  } else {
    htmlElement.classList.add("light");
    sidebarThemeIcon.textContent = "🌙";
    
    // Also update the top theme icon if it exists
    const topThemeIcon = document.getElementById("top-theme-icon");
    if (topThemeIcon) {
      topThemeIcon.textContent = "🌙";
    }
  }

  // Add Event Listeners for Theme Toggles
  sidebarThemeToggle.addEventListener("click", toggleTheme);
  
  // Add event listener for top theme toggle if it exists
  const topThemeToggle = document.getElementById("top-theme-toggle");
  if (topThemeToggle) {
    topThemeToggle.addEventListener("click", toggleTheme);
  }

  // Menu Toggle Function
  let isMenuOpen = false;
  const toggleMenu = () => {
    isMenuOpen = !isMenuOpen;
    if (isMenuOpen) {
      sidebar.classList.remove("translate-x-full");
      sidebar.classList.add("translate-x-0", "open");
      overlay.classList.remove("hidden");
      document.body.style.overflow = "hidden";
      
      // Añadir un pequeño retraso para que las animaciones se vean mejor
      setTimeout(() => {
        const menuItems = sidebar.querySelectorAll("ul li");
        menuItems.forEach((item, index) => {
          setTimeout(() => {
            item.style.opacity = "1";
            item.style.transform = "translateX(0)";
          }, index * 50);
        });
      }, 300);
    } else {
      const menuItems = sidebar.querySelectorAll("ul li");
      menuItems.forEach((item) => {
        item.style.opacity = "0";
        item.style.transform = "translateX(20px)";
      });
      
      setTimeout(() => {
        sidebar.classList.remove("translate-x-0", "open");
        sidebar.classList.add("translate-x-full");
        overlay.classList.add("hidden");
        document.body.style.overflow = "";
      }, 200);
    }
  };

  // Add Event Listeners for Menu Toggle
  menuToggle.addEventListener("click", toggleMenu);
  closeMenu.addEventListener("click", toggleMenu);
  overlay.addEventListener("click", toggleMenu);

  // Close menu when clicking a link
  const navLinks = sidebar.querySelectorAll("a");
  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      if (isMenuOpen) {
        toggleMenu();
      }
    });
  });

  // Add active class to current page link
  document.addEventListener("DOMContentLoaded", () => {
    const currentPath = window.location.pathname;
    navLinks.forEach(link => {
      const linkPath = link.getAttribute('href');
      if (currentPath === linkPath || 
          (linkPath !== '/' && currentPath.startsWith(linkPath))) {
        link.classList.add('bg-secondary/20', 'text-white', 'border-l-4', 'border-secondary');
      }
    });
  });

  // Swipe to close functionality for mobile
  let touchStartX = 0;
  let touchEndX = 0;
  
  sidebar.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  }, false);
  
  sidebar.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }, false);
  
  function handleSwipe() {
    if (touchStartX - touchEndX > 50 && isMenuOpen) {
      // Swipe left to close
      toggleMenu();
    }
  }
</script>

