---
import { getPopulationIconPath } from './ProjectIconMapper.astro';

interface Props {
  title: string;
  subtitle: string;
  populations: string[];
  columns?: 2 | 3 | 6;
}

const { title, subtitle, populations, columns = 2 } = Astro.props;

const getColumnsClass = () => {
  switch(columns) {
    case 2: return "grid-cols-1 md:grid-cols-2";
    case 3: return "grid-cols-1 md:grid-cols-3";
    case 6: return "grid-cols-2 md:grid-cols-3 lg:grid-cols-6";
    default: return "grid-cols-1 md:grid-cols-2";
  }
};

// Array de colores para los iconos
const iconColors = [
  'from-purple-500 to-pink-500',
  'from-blue-500 to-teal-500',
  'from-green-500 to-emerald-500',
  'from-yellow-500 to-orange-500',
  'from-red-500 to-rose-500',
  'from-indigo-500 to-purple-500'
];
---

<section class="py-20 bg-gradient-to-br from-gray-50 to-white dark:from-darkbg dark:to-gray-900 relative overflow-hidden">
  <!-- Elementos decorativos -->
  <div class="absolute inset-0">
    <div class="absolute top-0 right-0 w-1/3 h-1/3 bg-primary/5 rounded-full transform translate-x-1/4 -translate-y-1/4 blur-3xl animate-pulse"></div>
    <div class="absolute bottom-0 left-0 w-1/3 h-1/3 bg-secondary/5 rounded-full transform -translate-x-1/4 translate-y-1/4 blur-3xl animate-pulse"></div>
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <div class="text-center mb-12">
      <h2 class="text-3xl sm:text-4xl font-bold mb-3 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
        {title}
      </h2>
      
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
        {subtitle}
      </p>
      
      <div class="h-1 w-24 bg-gradient-to-r from-primary to-secondary mx-auto mt-4 rounded-full"></div>
    </div>
    
    <div class={`grid ${getColumnsClass()} gap-4 md:gap-6 max-w-5xl mx-auto mt-12`}>
      {populations.map((population, index) => (
        <div class="bg-white dark:bg-darkbg/50 backdrop-blur-sm rounded-xl shadow-md hover:shadow-lg transition-all duration-300 p-6 text-center border border-gray-100 dark:border-white/5 flex flex-col items-center justify-center group hover:-translate-y-1">
          <div class={`w-16 h-16 rounded-xl bg-gradient-to-br ${iconColors[index % iconColors.length]} p-0.5 rotate-2 group-hover:rotate-6 transition-all duration-300`}>
            <div class="w-full h-full bg-white dark:bg-darkbg rounded-lg flex items-center justify-center transform -rotate-2 group-hover:-rotate-6 transition-all duration-300">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                class="h-8 w-8 group-hover:scale-110 transition-transform duration-300" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
                style={`stroke: url(#gradient-${index});`}
              >
                <defs>
                  <linearGradient id={`gradient-${index}`} x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stop-color="var(--color-start)" />
                    <stop offset="100%" stop-color="var(--color-end)" />
                  </linearGradient>
                </defs>
                <path 
                  stroke-linecap="round" 
                  stroke-linejoin="round" 
                  stroke-width="2" 
                  d={getPopulationIconPath(index)} 
                />
              </svg>
            </div>
          </div>
          <h3 class="text-gray-800 dark:text-white font-medium text-lg mt-4 group-hover:text-primary dark:group-hover:text-secondary transition-colors duration-300">
            {population}
          </h3>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }

  @keyframes pulse {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 0.8; }
  }

  .animate-pulse {
    animation: pulse 4s ease-in-out infinite;
  }

  /* Definir variables CSS para los colores de gradiente */
  .from-purple-500 { --color-start: #8b5cf6; --color-end: #ec4899; }
  .from-blue-500 { --color-start: #3b82f6; --color-end: #14b8a6; }
  .from-green-500 { --color-start: #22c55e; --color-end: #10b981; }
  .from-yellow-500 { --color-start: #eab308; --color-end: #f97316; }
  .from-red-500 { --color-start: #ef4444; --color-end: #f43f5e; }
  .from-indigo-500 { --color-start: #6366f1; --color-end: #8b5cf6; }

  /* Animaciones para elementos al hacer scroll */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  section.in-view .grid > div {
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
  }

  section.in-view .grid > div:nth-child(2) {
    animation-delay: 0.2s;
  }

  section.in-view .grid > div:nth-child(3) {
    animation-delay: 0.3s;
  }

  section.in-view .grid > div:nth-child(4) {
    animation-delay: 0.4s;
  }

  section.in-view .grid > div:nth-child(5) {
    animation-delay: 0.5s;
  }

  section.in-view .grid > div:nth-child(6) {
    animation-delay: 0.6s;
  }
</style>

<script>
  // AÃ±adir la clase in-view cuando el elemento es visible
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');
        }
      });
    }, {
      threshold: 0.1
    });

    document.querySelectorAll('section').forEach((section) => {
      observer.observe(section);
    });
  });
</script>

