---
import { getRelativeLocaleUrl } from "astro:i18n";
import BaseLayout from "@/layouts/BaseLayout.astro";
import ProjectHero from "@/components/projects/ProjectHero.astro";
import ProjectDescription from "@/components/projects/ProjectDescription.astro";
import ProjectPopulationGrid from "@/components/projects/ProjectPopulationGrid.astro";
import ProjectActionAreas from "@/components/projects/ProjectActionAreas.astro";
import ProjectImpactStats from "@/components/projects/ProjectImpactStats.astro";
import ProjectImpactItems from "@/components/projects/ProjectImpactItems.astro";
import ProjectGallerySection from "@/components/projects/ProjectGallerySection.astro";
import Cta from "@/components/Cta.astro";

interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  mainImage?: string;
  ctaText?: string;
  populationGrid?: {
    title: string;
    subtitle: string;
    populations: string[];
    columns?: 2 | 3 | 6;
  };
  impactStats?: {
    value: string;
    label: string;
    icon: string;
  }[];
  impactItems?: string[];
  impactTitle?: string;
  impactSubtitle?: string;
  ctaData?: {
    title: string;
    description: string;
    contactLink: string;
    donateLink: string;
    contactText: string;
    donateText: string;
  };
  textBackButton?: string;
  projectDescription?: {
    title: string;
    subtitle: string;
    quoteText?: string;
  };
  actionAreas?: {
    title: string;
    description: string;
    actions: {
      icon: string;
      title: string;
      description: string;
    }[];
  };
  gallerySection?: {
    title: string;
    subtitle: string;
    galleryImages?: {
      src: string;
      width: number;
      height: number;
      alt: string;
      caption?: string;
    }[];
  };
}

const currentLang = Astro.currentLocale || "es";

const {
  title,
  subtitle,
  description,
  mainImage,
  ctaText,
  populationGrid,
  actionAreas,
  impactStats,
  impactItems,
  gallerySection,
  ctaData,
  textBackButton,
  projectDescription,
  impactTitle,
  impactSubtitle,

} = Astro.props;
---

<BaseLayout title={`${title} - MIRES`} description={description}>
  <!-- Back Button -->
  <div class="fixed top-20 left-4 z-40 mt-4">
    <a
      href={getRelativeLocaleUrl(currentLang, "/projects")}
      class="flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-darkbg/90 backdrop-blur-sm rounded-full shadow-md hover:shadow-lg transition-all duration-300 text-primary dark:text-white border border-gray-200 dark:border-white/10 group"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 transform group-hover:-translate-x-1 transition-transform duration-300"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
      </svg>
      <span class="text-sm font-medium">{textBackButton}</span>
    </a>
  </div>

  <!-- Hero Section -->
  <ProjectHero
    title={title}
    subtitle={subtitle}
    imageSrc={mainImage}
    imageAlt={`Imagen principal de ${title}`}
    ctaText={ctaText}
  >
    <span slot="caption"> {title}</span>
  </ProjectHero>

  <!-- Descripción del Proyecto -->
  <ProjectDescription
    title={`${projectDescription?.title} ${title}`}
    subtitle={`${projectDescription?.subtitle}`}
    quoteText={`${projectDescription?.quoteText}`}
  >
    <p slot="description-first-paragraph">
      <slot name="description-first-paragraph" />
    </p>

    <p slot="description-second-paragraph">
      <slot name="description-second-paragraph" />
    </p>
  </ProjectDescription>

  <!-- Ámbito Poblacional -->
  <ProjectPopulationGrid {...populationGrid} />

  <!-- Áreas de Acción -->
  <ProjectActionAreas
    title={actionAreas?.title || "Default Title"}
    subtitle={actionAreas?.description || "Default Description"}
    actionAreas={actionAreas?.actions || []}
  />

  <!-- Impacto - Condicional según el tipo de datos proporcionados -->
  {
    impactStats && (
      <ProjectImpactStats
        title={impactTitle || "Default Title"}
        subtitle={impactSubtitle || "Default Subtitle"}
        stats={impactStats}
      />
    )
  }

  {
    impactItems && (
      <ProjectImpactItems
        title={impactTitle || "Default Title"}
        subtitle={impactSubtitle || "Default Subtitle"}
        impactItems={impactItems}
      />
    )
  }

  <!-- Galería de Fotos -->
  <ProjectGallerySection 
    title={gallerySection?.title}
    subtitle={gallerySection?.subtitle}
    images={gallerySection?.galleryImages}
  />

  <!-- CTA -->
  <Cta {...ctaData} />

  
</BaseLayout>

<script>
  // Script para detectar cuando las secciones entran en el viewport
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view");
          }
        });
      },
      { threshold: 0.1 },
    );

    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>
