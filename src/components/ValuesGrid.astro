---
interface Value {
  id: number;
  title: string;
  reference?: string;
  description: string;
}

interface Props {
  values: Value[];
  titleSection: string;
}

const { values, titleSection } = Astro.props;

// Iconos para cada valor basados en su ID
const getValueIcon = (id: number) => {
  switch(id) {
    case 1: return "human-dignity";
    case 2: return "equality";
    case 3: return "solidarity";
    case 4: return "family";
    case 5: return "assistance";
    case 6: return "protection";
    case 7: return "sustainability";
    case 8: return "faith";
    default: return "default";
  }
};

// Array de colores para los gradientes
const gradientColors = [
  "from-purple-500 to-pink-500",
  "from-blue-500 to-teal-500",
  "from-green-500 to-emerald-500",
  "from-yellow-500 to-orange-500",
  "from-red-500 to-rose-500",
  "from-indigo-500 to-purple-500",
  "from-sky-500 to-indigo-500",
  "from-amber-500 to-red-500"
];

// Asignar un color específico a cada ID de valor para mantener consistencia
const getValueColor = (id: number) => {
  return gradientColors[(id - 1) % gradientColors.length];
};
---

<section class="py-20 bg-white dark:bg-darkbg/80 relative overflow-hidden">
  <!-- Elementos decorativos de fondo con gradientes y animación -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute top-1/4 right-0 w-1/2 h-1/2 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-full transform translate-x-1/4 blur-3xl animate-pulse"></div>
    <div class="absolute bottom-1/4 left-0 w-1/2 h-1/2 bg-gradient-to-br from-secondary/10 to-primary/10 rounded-full transform -translate-x-1/4 blur-3xl animate-pulse-slow"></div>
  </div>
  
  <div class="container mx-auto px-4 relative z-10">
    <div class="text-center mb-16">
      <h2 class="text-3xl sm:text-4xl font-bold mb-4 text-primary dark:text-white">
        {titleSection}
      </h2>
      <div class="h-1 w-24 bg-secondary mx-auto mt-4 rounded"></div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto">
      {values.map((value) => (
        <div class="bg-gray-50 dark:bg-darkbg/50 rounded-2xl shadow-md hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-white/5 overflow-hidden group">
          <div class="p-8 relative">
            <!-- Elemento decorativo superior con gradiente -->
            <div class={`absolute top-0 right-0 w-24 h-24 bg-gradient-to-br ${getValueColor(value.id)} opacity-20 rounded-full transform translate-x-1/3 -translate-y-1/3 group-hover:opacity-30 transition-all duration-300`}></div>
            
            <div class="relative z-10">
              <div class="flex items-start gap-4 mb-6">
                <div class="flex-shrink-0 mt-1">
                  <!-- Contenedor del icono con gradiente -->
                  <div class={`w-12 h-12 rounded-full bg-gradient-to-br ${getValueColor(value.id)} p-0.5 rotate-1 group-hover:rotate-3 transition-all duration-300`}>
                    <div class="w-full h-full bg-white dark:bg-darkbg rounded-full flex items-center justify-center transform -rotate-1 group-hover:-rotate-3 transition-all duration-300">
                      <svg 
                        xmlns="http://www.w3.org/2000/svg" 
                        class="h-6 w-6 group-hover:scale-110 transition-transform duration-300" 
                        fill="none" 
                        viewBox="0 0 24 24" 
                        stroke="currentColor"
                        style={`stroke: url(#gradient-${value.id});`}
                      >
                        <defs>
                          <linearGradient id={`gradient-${value.id}`} x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" stop-color="var(--color-start)" />
                            <stop offset="100%" stop-color="var(--color-end)" />
                          </linearGradient>
                        </defs>
                        
                        {getValueIcon(value.id) === "human-dignity" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />}
                        {getValueIcon(value.id) === "equality" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />}
                        {getValueIcon(value.id) === "solidarity" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />}
                        {getValueIcon(value.id) === "family" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />}
                        {getValueIcon(value.id) === "assistance" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />}
                        {getValueIcon(value.id) === "protection" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />}
                        {getValueIcon(value.id) === "sustainability" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />}
                        {getValueIcon(value.id) === "faith" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />}
                        {getValueIcon(value.id) === "default" && <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />}
                      </svg>
                    </div>
                  </div>
                </div>
                
                <div>
                  <!-- Título con efecto de gradiente al hover -->
                  <h3 class="text-xl font-bold text-primary dark:text-white mb-2 
                  transition-all duration-300">{value.title}</h3>
                  
                  {value.reference && (
                    <span class={`inline-block px-3 py-1 text-sm font-medium rounded-full transition-all duration-300`} style={`background-color: var(--color-start${value.id}); background-opacity: 0.1; color: var(--color-start${value.id});`}>
                      {value.reference}
                    </span>
                  )}
                </div>
              </div>
              
              <p class="text-gray-700 dark:text-gray-300 leading-relaxed pl-16">
                {value.description}
              </p>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  /* Animación al hacer hover */
  .grid > div {
    transition: all 0.3s ease-in-out;
  }
  
  .grid > div:hover {
    transform: translateY(-5px);
  }
  
  /* Animaciones para los fondos */
  @keyframes pulse {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 0.8; }
  }
  
  @keyframes pulse-slow {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 0.7; }
  }

  .animate-pulse {
    animation: pulse 4s ease-in-out infinite;
  }
  
  .animate-pulse-slow {
    animation: pulse-slow 6s ease-in-out infinite;
  }
  
  /* Definir variables CSS para los colores de gradiente */
  .from-purple-500 { --color-start: #8b5cf6; --color-end: #ec4899; }
  .from-blue-500 { --color-start: #3b82f6; --color-end: #14b8a6; }
  .from-green-500 { --color-start: #22c55e; --color-end: #10b981; }
  .from-yellow-500 { --color-start: #eab308; --color-end: #f97316; }
  .from-red-500 { --color-start: #ef4444; --color-end: #f43f5e; }
  .from-indigo-500 { --color-start: #6366f1; --color-end: #8b5cf6; }
  .from-sky-500 { --color-start: #0ea5e9; --color-end: #6366f1; }
  .from-amber-500 { --color-start: #f59e0b; --color-end: #ef4444; }
  
  /* Variables CSS para colores específicos por ID */
  .from-purple-500 { --color-start1: rgba(139, 92, 246, 0.15); --color-text1: rgb(139, 92, 246); }
  .from-blue-500 { --color-start2: rgba(59, 130, 246, 0.15); --color-text2: rgb(59, 130, 246); }
  .from-green-500 { --color-start3: rgba(34, 197, 94, 0.15); --color-text3: rgb(34, 197, 94); }
  .from-yellow-500 { --color-start4: rgba(234, 179, 8, 0.15); --color-text4: rgb(234, 179, 8); }
  .from-red-500 { --color-start5: rgba(239, 68, 68, 0.15); --color-text5: rgb(239, 68, 68); }
  .from-indigo-500 { --color-start6: rgba(99, 102, 241, 0.15); --color-text6: rgb(99, 102, 241); }
  .from-sky-500 { --color-start7: rgba(14, 165, 233, 0.15); --color-text7: rgb(14, 165, 233); }
  .from-amber-500 { --color-start8: rgba(245, 158, 11, 0.15); --color-text8: rgb(245, 158, 11); }
  
  /* Animaciones para elementos al hacer scroll */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  section.in-view .grid > div {
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
  }
  
  section.in-view .grid > div:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  section.in-view .grid > div:nth-child(3) {
    animation-delay: 0.3s;
  }
  
  section.in-view .grid > div:nth-child(4) {
    animation-delay: 0.4s;
  }
  
  section.in-view .grid > div:nth-child(5) {
    animation-delay: 0.5s;
  }
  
  section.in-view .grid > div:nth-child(6) {
    animation-delay: 0.6s;
  }
  
  section.in-view .grid > div:nth-child(7) {
    animation-delay: 0.7s;
  }
  
  section.in-view .grid > div:nth-child(8) {
    animation-delay: 0.8s;
  }
</style>

<script>
  // Añadir la clase in-view cuando el elemento es visible
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');
        }
      });
    }, {
      threshold: 0.1
    });

    document.querySelectorAll('section').forEach((section) => {
      observer.observe(section);
    });
  });
</script>
